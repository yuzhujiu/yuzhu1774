前情回顾

1. 如何创建多个子进程

2. 进程创建细节
   os.getpid()
   os.getppid()
   sys.exit()

   孤儿  僵尸

3. 自定义进程类

   继承父类  重写（__init__,run）

4. 进程间通信

   q = Queue()
   q.get()
   q.put()

5. 群聊聊天室

群聊聊天室
    有人进入聊天室需要输入姓名，姓名不能重复
    有人进入聊天室时，其他人会收到通知：Lucy 进入了聊天室
    一个人发消息，其他人会收到： Lucy ： 一起出去玩啊。
    有人退出聊天室，则其他人也会收到通知 : Lucy 退出了聊天室

需求分析： C/S  客户端知道怎么使用使用流程
   见图

技术点分析 ： 大体上能够确定的技术方向
   存储内容（容器）： 姓名  地址
       [(name,address),...]
       {name:address}

   网络 ： udp
   网络消息数据流： 客户端--》 服务端 --》 客户端
   客户端收发： 分成不同的进程，父进程发送子进程接收


功能划分： 分成几个功能块  封装和代码结构
   代码结构：函数

   进入
   聊天
   退出

设计通信协议
   类型与 数据参数之间使用 空格符号分割

          请求类型    数据参数
   进入    LOGIN      name
   聊天    CHAT       name content
   退出    QUIT       name


分模块设计逻辑
    框架结构

    进入
       客户端
           输入用户名
           发送用户名
           接收结果
           判断是否可以进入聊天

       服务端
           接收请求 调用对应方法
           判断用户是否可以进入
           发送判断结果
           如果可以：保存用户信息，告知其他人

    聊天
       客户端
           创建子进程
           父进程循环输入发送
           子进程循环接收打印

       服务端
           接收数据
           转发内容给其他客户端

    退出


优化完善


随堂练习：
现在有500张票，存在一个列表中 ["T1",...."T500"]，
10个窗口同时卖这500张票 W1-W10

使用10个线程模拟这10个窗口，同时卖票，
直到所有的票都卖出为止，
每出一张票 需要0.1秒，
打印表示即可print("W1----T250")


今日内容：
1. 群聊聊天室
2. 线程
   线程特点
3. 线程同步互斥


作业 ： 1. 群聊聊天室 梳理
       2. 自定义线程类


from threading import Thread
from time import sleep

class MyThread(Thread):
    def __init__(self,song):
        self.song = song
        super().__init__() # 得到父类内容

    # 线程要做的事情
    def run(self):
        for i in range(3):
            sleep(2)
            print("播放:",self.song)

t = MyThread("凉凉")
t.start() # 运行run

ssssssssssss

sssssssssssssssssssssssssssss